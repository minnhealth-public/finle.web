"""Django settings for app_web project.

Generated by 'django-admin startproject' using Django 4.2.3 and merged with settings.py from the MHS project finle.web.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

import sentry_sdk
from django.conf.global_settings import DATABASES
from sentry_sdk.integrations.django import DjangoIntegration

from app_web.env import env_get_allowed_hosts, env_get_allowed_origins, env_get_raw_value

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env_get_raw_value("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_get_raw_value("DEBUG") in (True, "True")

ALLOWED_HOSTS = env_get_allowed_hosts()
# CSRF_TRUSTED_ORIGINS = ['https://financiallegalwebapp.azurewebsites.net']

# Application definition

INSTALLED_APPS = [
    "app_web.apps.FinleConfig",
    "bootstrap5",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "simple_history",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]

ROOT_URLCONF = "app_web.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
REST_FRAMEWORK = {"DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",)}

SIMPLE_JWT = {
    # It will work instead of the default serializer(TokenObtainPairSerializer).
    # the refresh cookie is stored in a http only value so it can not be retrieved from javascript
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_COOKIE_PATH": "/",
    "REFRESH_COOKIE": "refresh",
    "REFRESH_COOKIE_HTTP_ONLY": True,
    "REFRESH_COOKIE_SECURE": True,
    "AUTH_COOKIE_SAMESITE": "Lax",
    "TOKEN_OBTAIN_SERIALIZER": "app_web.serializers.FinleTokenObtainPairSerializer",
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    # ...
}

WSGI_APPLICATION = "app_web.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Note that 'default' is the key that Django looks for when running the db initialization.
DATABASES["default"] = {
    "ENGINE": "django.db.backends.postgresql",
    "NAME": env_get_raw_value("POSTGRES_NAME"),
    "USER": env_get_raw_value("POSTGRES_USER"),
    "PASSWORD": env_get_raw_value("POSTGRES_PASSWORD"),
    "HOST": env_get_raw_value("POSTGRES_HOST"),
    "PORT": 5432,  # default postgres port must be open when running docker locally
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# LOGGING just stream to console for now
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = "app_web/static"
STATIC_URL = "static/"

# Media files
MEDIA_ROOT = "app_web/media"
MEDIA_URL = "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

sentry_uri = env_get_raw_value("SENTRY_URI")
if sentry_uri.startswith("https://"):
    # Sentry error/crash reporting collection system configuration.
    # To log in to the Sentry dashboard, visit:
    # https://minnhealth.sentry.io/projects/finle-web/?project=4504801381646336
    sentry_sdk.init(
        dsn=f"{sentry_uri}",
        integrations=[
            DjangoIntegration(),
        ],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )

ACCESS_CONTROL_ALLOW_HEADERS = True
CORS_ALLOW_HEADERS = (
    "content-disposition",
    "accept-encoding",
    "authorization",
    "content-type",
    "accept",
    "origin",
    "x-csrftoken",
)

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = env_get_allowed_origins()
CORS_ALLOW_ALL_ORIGINS = env_get_raw_value("CORS_ALLOW_ALL_ORIGINS") in (True, "True")

AUTH_USER_MODEL = "app_web.User"
